
// nextflow flags
nextflow.enable.moduleBinaries = true

// workflow marapeters
params {
    // process params
    output_dir = "results"
    publish_mode = 'copy'
    fragments_filename = 'atac_fragments.tsv.gz'
    barcode_metrics_filename = "per_barcode_metrics.csv"
    // inputs
    help = false
    sample_table = "/lustre/scratch127/cellgen/cellgeni/aljes/atac-pipeline/data/sample_table_filt.csv"
    celltype_annotation = "/lustre/scratch127/cellgen/cellgeni/aljes/atac-pipeline/data/celltype_annotation.csv"
    chromsizes = "/lustre/scratch127/cellgen/cellgeni/aljes/atac-pipeline/data/hg38.chrom.sizes"
    blacklist = "/lustre/scratch127/cellgen/cellgeni/aljes/atac-pipeline/data/hg38-blacklist.v2.bed"
    tss_bed = "/lustre/scratch127/cellgen/cellgeni/aljes/atac-pipeline/data/hg38_pycistopic_tss.bed"
}

process {
    queue = 'normal'
    maxRetries = 5
    errorStrategy = { task.exitStatus in 130 ? lowMemoryError(sample_id, task.process) : 'finish' }
    container = '/nfs/cellgeni/singularity/images/scenicplus-fa55dae.sif'
    publishDir = [
        mode: params.publish_mode,
        path: { "${params.output_dir}/${sample_id}" },
        overwrite: true
    ]
    withName: 'PYCISTOPIC:MakePseudobulk' {
        debug = true
        cpus = 8
        memory = { 105.GB + 100.GB * (task.attempt - 1) }
        publishDir = [ enabled: false ]
    }
    withName: 'PYCISTOPIC:PeakCalling' {
        cpus = 8
        memory = { 16.GB + 16.GB * (task.attempt - 1) }
    }
    withName: 'PYCISTOPIC:InferConsensus' {
        debug = true
        cpus = 8
        memory = { 4.GB + 4.GB * (task.attempt - 1) }
    }
    withName: 'PYCISTOPIC:QualityControl' {
        cpus = 10
        memory = { 80.GB + 120.GB * (task.attempt - 1) }
        publishDir = [
            mode: params.publish_mode,
            path: { "${params.output_dir}/${sample_id}" },
            pattern: "*qc",
            overwrite: true
        ]
    }
    withName: 'PYCISTOPIC:CreateCisTopicObject' {
        cpus = 8
        memory = { 64.GB + 120.GB * (task.attempt - 1) }
    }
}

singularity {
    enabled = true
    autoMounts = true
    runOptions  = '-B /lustre,/nfs'
}

executor {
    name = 'lsf'
    perJobMemLimit = true
}

// Capturing Nextflow log files into a 'reports' directory
import java.time.*
Date now = new Date()

params {
    tracedir = "reports"
    timestamp = now.format("yyyyMMdd-HH-mm-ss")
}

timeline {
    enabled = true
    file = "${params.tracedir}/${params.timestamp}_timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/${params.timestamp}_report.html"
}